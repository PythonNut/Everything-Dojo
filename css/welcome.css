@font-face {
  font-family: 'Lato';
  font-style: normal;
  font-weight: 700;
  src: url(../fonts/Lato-Bold.woff) format('woff');
}
@font-face {
  font-family: 'Hammersmith One';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/HammersmithOne.woff) format('woff');
}
@font-face {
  font-family: 'Gorditas';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Gorditas-Regular.woff) format('woff');
}
@font-face {
  font-family: 'Fredoka One';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/FredokaOne-Regular.woff) format('woff');
}
@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Ubuntu.woff) format('woff');
}
@font-face {
  font-family: 'Ubuntu';
  font-style: normal;
  font-weight: 700;
  src: url(../fonts/Ubuntu-Bold.woff) format('woff');
}
@font-face {
  font-family: 'PressStart2P';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/PressStart2P-Regular.woff) format('woff');
}
@font-face {
  font-family: 'Lato';
  font-style: italic;
  font-weight: 700;
  src: url(../fonts/Lato-BoldItalic.woff) format('woff');
}
@font-face {
  font-family: 'Abril Fatface';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/AbrilFatface-Regular.woff) format('woff');
}
@font-face {
  font-family: 'Lato';
  font-style: normal;
  font-weight: 400;
  src: url(../fonts/Lato-Regular.woff) format('woff');
}
@font-face {
  font-family: 'Droid Sans Mono';
  font-style: normal;
  font-weight: 700;
  src: url(../fonts/Droid-Sans-Mono.woff) format('woff');
}
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
  display: block;
}

body {
  line-height: 1;
}

ol, ul {
  /*list-style: none;*/
}
blockquote, q {
  quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
}

.antialias {
  -webkit-transform: translate3d(0,0,0);
  -moz-transform: translate3d(0,0,0);
  transform: translate3d(0,0,0);
}

body {
  min-height: 740px;
  background: rgb(215, 215, 215);
  background: -webkit-gradient(radial, 50% 50%, 0, 50% 50%, 500, from(rgb(240, 240, 240)), to(rgb(190, 190, 190)));
  background: -webkit-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:  -moz-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:   -ms-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:    -o-radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));
  background:     radial-gradient(rgb(240, 240, 240), rgb(190, 190, 190));  
}


/*
  Because the main point behind the impress.js demo is to demo impress.js
  we display a fallback message for users with browsers that don't support
  all the features required by it.
  
  All of the content will be still fully accessible for them, but I want
  them to know that they are missing something.
  
  And then we hide the message, when support is detected in the browser.
*/

.fallback-message {
  font-family: sans-serif;
  line-height: 1.3;
  
  width: 780px;
  padding: 10px 10px 0;
  margin: 20px auto;

  border: 1px solid #E4C652;
  border-radius: 10px;
  background: #EEDC94;
}

.fallback-message p {
  margin-bottom: 10px;
}

.impress-supported .fallback-message {
  display: none;
}

/*
  Now let's style the presentation steps.
  
  We start with basics to make sure it displays correctly in everywhere ...
*/

.step {
  position: relative;
  width: 900px;
  padding: 40px;
  margin: 20px auto;

  -webkit-box-sizing: border-box;
  -moz-box-sizing:  border-box;
  -ms-box-sizing:   border-box;
  -o-box-sizing:    border-box;
  box-sizing:     border-box;
}

.impress-enabled .strut-slide-overview .step {
  opacity: 1;
}

/*
  ... and we enhance the styles for impress.js.
  
  Basically we remove the margin and make inactive steps a little bit transparent.
*/
.impress-enabled .step {
  margin: 0;
  opacity: 0.3;

  -webkit-transition: opacity 1s;
  -moz-transition:  opacity 1s;
  -ms-transition:   opacity 1s;
  -o-transition:    opacity 1s;
  transition:     opacity 1s;
}

.impress-enabled .step.active { opacity: 1 }


/*
  And now we start to style each step separately.
  
  I agree that this may be not the most efficient, object-oriented and
  scalable way of styling, but most of steps have quite a custom look
  and typography tricks here and there, so they had to be styles separately.

  First is the title step with a big <h1> (no room for padding) and some
  3D positioning along Z axis.
  
  The last step is an overview.
  There is no content in it, so we make sure it's not visible because we want
  to be able to click on other steps.

*/
#overview { display: none }

/*
  We also make other steps visible and give them a pointer cursor using the
  `impress-on-` class.
*/
.impress-on-overview .step {
  opacity: 1;
  cursor: pointer;
}


/*
  Now, when we have all the steps styled let's give users a hint how to navigate
  around the presentation.
  
  The best way to do this would be to use JavaScript, show a delayed hint for a
  first time users, then hide it and store a status in cookie or urlStorage...
  
  But I wanted to have some CSS fun and avoid additional scripting...
  
  Let me explain it first, so maybe the transition magic will be more readable
  when you read the code.
  
  First of all I wanted the hint to appear only when user is idle for a while.
  You can't detect the 'idle' state in CSS, but I delayed a appearing of the
  hint by 5s using transition-delay.
  
  You also can't detect in CSS if the user is a first-time visitor, so I had to
  make an assumption that I'll only show the hint on the first step. And when
  the step is changed hide the hint, because I can assume that user already
  knows how to navigate.
  
  To summarize it - hint is shown when the user is on the first step for longer
  than 5 seconds.
  
  The other problem I had was caused by the fact that I wanted the hint to fade
  in and out. It can be easily achieved by transitioning the opacity property.
  But that also meant that the hint was always on the screen, even if totally 
  transparent. It covered part of the screen and you couldn't correctly clicked
  through it.
  Unfortunately you cannot transition between display `block` and `none` in pure
  CSS, so I needed a way to not only fade out the hint but also move it out of
  the screen.
  
  I solved this problem by positioning the hint below the bottom of the screen
  with CSS transform and moving it up to show it. But I also didn't want this move
  to be visible. I wanted the hint only to fade in and out visually, so I delayed
  the fade in transition, so it starts when the hint is already in its correct
  position on the screen.
  
  I know, it sounds complicated ... maybe it would be easier with the code?
*/

.hint {
  /*
    We hide the hint until presentation is started and from browsers not supporting
    impress.js, as they will have a linear scrollable view ...
  */
  display: none;
  
  /*
    ... and give it some fixed position and nice styles.
  */
  position: fixed;
  left: 0;
  right: 0;
  bottom: 200px;
  
  background: rgba(0,0,0,0.5);
  color: #EEE;
  text-align: center;
  
  font-size: 50px;
  padding: 20px;
  
  z-index: 100;
  
  /*
    By default we don't want the hint to be visible, so we make it transparent ...
  */
  opacity: 0;
  
  /*
    ... and position it below the bottom of the screen (relative to it's fixed position)
  */
  -webkit-transform: translateY(400px);
  -moz-transform:  translateY(400px);
  -ms-transform:   translateY(400px);
  -o-transform:    translateY(400px);
  transform:     translateY(400px);

  /*
    Now let's imagine that the hint is visible and we want to fade it out and move out
    of the screen.
    
    So we define the transition on the opacity property with 1s duration and another
    transition on transform property delayed by 1s so it will happen after the fade out
    on opacity finished.
    
    This way user will not see the hint moving down.
  */
  -webkit-transition: opacity 1s, -webkit-transform 0.5s 1s;
  -moz-transition:  opacity 1s,  -moz-transform 0.5s 1s;
  -ms-transition:   opacity 1s,   -ms-transform 0.5s 1s;
  -o-transition:    opacity 1s,    -o-transform 0.5s 1s;
  transition:     opacity 1s,     transform 0.5s 1s;
}

/*
  Now we 'enable' the hint when presentation is initialized ...
*/
.impress-enabled .hint { display: block }

/*
  ... and we will show it when the first step (with id 'bored') is active.
*/
.strut-slide-0 .hint {
  /*
    We remove the transparency and position the hint in its default fixed
    position.
  */
  opacity: 1;
  
  -webkit-transform: translateY(0px);
  -moz-transform:  translateY(0px);
  -ms-transform:   translateY(0px);
  -o-transform:    translateY(0px);
  transform:     translateY(0px);
  
  /*
    Now for fade in transition we have the oposite situation from the one
    above.
    
    First after 4.5s delay we animate the transform property to move the hint
    into its correct position and after that we fade it in with opacity 
    transition.
  */
  -webkit-transition: opacity 1s 5s, -webkit-transform 0.5s 2.5s;
  -moz-transition:  opacity 1s 5s,  -moz-transform 0.5s 2.5s;
  -ms-transition:   opacity 1s 5s,   -ms-transform 0.5s 2.5s;
  -o-transition:    opacity 1s 5s,    -o-transform 0.5s 2.5s;
  transition:     opacity 1s 5s,     transform 0.5s 2.5s;
}

/*
  And as the last thing there is a workaround for quite strange bug.
  It happens a lot in Chrome. I don't remember if I've seen it in Firefox.
  
  Sometimes the element positioned in 3D (especially when it's moved back
  along Z axis) is not clickable, because it falls 'behind' the <body>
  element.
  
  To prevent this, I decided to make <body> non clickable by setting 
  pointer-events property to `none` value.
  Value if this property is inherited, so to make everything else clickable
  I bring it back on the #impress element.
  
  If you want to know more about `pointer-events` here are some docs:
  https://developer.mozilla.org/en/CSS/pointer-events
  
  There is one very important thing to notice about this workaround - it makes
  everything 'unclickable' except what's in #impress element.
  
  So use it wisely ... or don't use at all.
*/
.impress-enabled      { pointer-events: none }
.impress-enabled #impress { pointer-events: auto }

/*
  There is one funny thing I just realized.
  
  Thanks to this workaround above everything except #impress element is invisible
  for click events. That means that the hint element is also not clickable.
  So basically all of this transforms and delayed transitions trickery was probably
  not needed at all...
  
  But it was fun to learn about it, wasn't it?
*/

/*
  That's all I have for you in this file.
  Thanks for reading. I hope you enjoyed it at least as much as I enjoyed writing it
  for you.
*/
[class*="bg-solid"] {
  border: 1px solid rgba(0, 0, 0, .3);
  box-shadow: 0 2px 6px rgba(0, 0, 0, .4);
  text-shadow: 0 2px 2px rgba(0, 0, 0, .3);
}


.bg-default {
  background: -webkit-radial-gradient(#F0F0F0, #BEBEBE);
  background: -moz-radial-gradient(#F0F0F0, #BEBEBE);
  background: -ms-radial-gradient(#F0F0F0, #BEBEBE);
  background: -o-radial-gradient(#F0F0F0, #BEBEBE);
  background: radial-gradient(#F0F0F0, #BEBEBE);
}

/*
included for legacy support of old decks with the defaultbg attribute set.
*/
.defaultbg {
  background: -webkit-radial-gradient(#F0F0F0, #BEBEBE);
  background: -moz-radial-gradient(#F0F0F0, #BEBEBE);
  background: -ms-radial-gradient(#F0F0F0, #BEBEBE);
  background: -o-radial-gradient(#F0F0F0, #BEBEBE);
  background: radial-gradient(#F0F0F0, #BEBEBE);
}

.bg-solid-orange {
  background-color: #774040;
}

.bg-solid-black {
  background-color: #222;
}

.bg-solid-light {
  background-color: white;
}

.bg-solid-smoke {
  background-color: #DDD;
}

.bg-solid-yellow {
  background-color: #D1B377;
}

.bg-solid-grass {
  background-color: #597847;
}

.bg-solid-darkgreen {
  background-color: #134952;
}

.bg-solid-sky {
  background-color: #515E99;
}

.bg-solid-lavender {
  background-color: #443C4D;
}

.bg-solid-purple {
  background-color: #6C478F;
}

.bg-solid-salmon {
  background-color: #C98D8D;
}

.nobg {
  background: url(img/nobg.png);
  background-size: 40px 40px;
}

.themeProviders .thumbnail {
  height: 20px;
  width: 20px;
  padding: 10px;
}
.bg-surf-grad-black {
  background-color: #333;
  background-image: -webkit-radial-gradient(#333, #111);
  background-image: -moz-radial-gradient(#333, #111);
  background-image: -ms-radial-gradient(#333, #111);
  background-image: -o-radial-gradient(#333, #111);
  background-image: radial-gradient(#333, #111);
}

.bg-surf-grad-light {
  background-color: #FFF;
  background-image: -webkit-radial-gradient(#FFF, #DDD);
  background-image: -moz-radial-gradient(#FFF, #DDD);
  background-image: -ms-radial-gradient(#FFF, #DDD);
  background-image: -o-radial-gradient(#FFF, #DDD);
  background-image: radial-gradient(#FFF, #DDD);
}

.bg-surf-grad-smoke {
  background-color: #EEE;
  background-image: -webkit-radial-gradient(#EEE, #CCC);
  background-image: -moz-radial-gradient(#EEE, #CCC);
  background-image: -ms-radial-gradient(#EEE, #CCC);
  background-image: -o-radial-gradient(#EEE, #CCC);
  background-image: radial-gradient(#EEE, #CCC);
}

.bg-surf-grad-orange {
  background-color: #945353;
  background-image: -webkit-radial-gradient(#945353, #774040);
  background-image: -moz-radial-gradient(#945353, #774040);
  background-image: -ms-radial-gradient(#945353, #774040);
  background-image: -o-radial-gradient(#945353, #774040);
  background-image: radial-gradient(#945353, #774040);
}

.bg-surf-grad-yellow {
  background-color: #cfb98c;
  background-image: -webkit-radial-gradient(#cfb98c, #D1B377);
  background-image: -moz-radial-gradient(#cfb98c, #D1B377);
  background-image: -ms-radial-gradient(#cfb98c, #D1B377);
  background-image: -o-radial-gradient(#cfb98c, #D1B377);
  background-image: radial-gradient(#cfb98c, #D1B377);
}

.bg-surf-grad-darkgreen {
  background-color: #4a939e;
  background-image: -webkit-radial-gradient(#4a939e, #134952);
  background-image: -moz-radial-gradient(#4a939e, #134952);
  background-image: -ms-radial-gradient(#4a939e, #134952);
  background-image: -o-radial-gradient(#4a939e, #134952);
  background-image: radial-gradient(#4a939e, #134952);
}

.bg-surf-grad-sky {
  background-color: #5e699c;
  background-image: -webkit-radial-gradient(#5e699c, #515E99);
  background-image: -moz-radial-gradient(#5e699c, #515E99);
  background-image: -ms-radial-gradient(#5e699c, #515E99);
  background-image: -o-radial-gradient(#5e699c, #515E99);
  background-image: radial-gradient(#5e699c, #515E99);
}

.bg-surf-grad-lavender {
  background-color: #554b61;
  background-image: -webkit-radial-gradient(#554b61, #443C4D);
  background-image: -moz-radial-gradient(#554b61, #443C4D);
  background-image: -ms-radial-gradient(#554b61, #443C4D);
  background-image: -o-radial-gradient(#554b61, #443C4D);
  background-image: radial-gradient(#554b61, #443C4D);
}

.bg-surf-grad-purple {
  background-color: #775796;
  background-image: -webkit-radial-gradient(#775796, #6C478F);
  background-image: -moz-radial-gradient(#775796, #6C478F);
  background-image: -ms-radial-gradient(#775796, #6C478F);
  background-image: -o-radial-gradient(#775796, #6C478F);
  background-image: radial-gradient(#775796, #6C478F);
}

.bg-surf-grad-salmon {
  background-color: #cfa2a2;
  background-image: -webkit-radial-gradient(#cfa2a2, #C98D8D);
  background-image: -moz-radial-gradient(#cfa2a2, #C98D8D);
  background-image: -ms-radial-gradient(#cfa2a2, #C98D8D);
  background-image: -o-radial-gradient(#cfa2a2, #C98D8D);
  background-image: radial-gradient(#cfa2a2, #C98D8D);
}

.bg-surf-grad-grass {
  background-color: #6c855d;
  background-image: -webkit-radial-gradient(#6c855d, #597847);
  background-image: -moz-radial-gradient(#6c855d, #597847);
  background-image: -ms-radial-gradient(#6c855d, #597847);
  background-image: -o-radial-gradient(#6c855d, #597847);
  background-image: radial-gradient(#6c855d, #597847);
}
